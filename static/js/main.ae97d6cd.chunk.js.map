{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","i","key","Scroll","props","style","overflow","border","height","children","SearchBox","searchChange","aria-label","type","placeholder","onChange","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","React","Component","connect","state","search","request","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","error","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","ThunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ae97d6cd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robo' src={`https://robohash.org/${id}?size=200x200`}></img>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({ robots}) => {\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (<Card \r\n                        key={i} \r\n                        id={robots[i].id} \r\n                        name={robots[i].name} \r\n                        email={robots[i].email}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflow: 'scroll', border: '2px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                aria-label=\"Search robots\"\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='search robots' \r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\n\r\nimport { setSearchFieldAction, requestRobotsAction } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.search.searchField,\r\n        robots: state.request.robots,\r\n        isPending: state.request.isPending\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchFieldAction(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobotsAction())\r\n    }\r\n}\r\n\r\nclass App extends React.Component {\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        if (isPending) {\r\n            return <h1>Loading</h1>\r\n        }\r\n        else {\r\n            return (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>Robofriends</h1>\r\n                    <SearchBox searchChange={onSearchChange}/>\r\n                    <Scroll>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchFieldAction = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobotsAction = () => (dispatch) => {\r\n    dispatch({\r\n        type: REQUEST_ROBOTS_PENDING\r\n    });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response =>  response.json())\r\n        .then(data => dispatch({\r\n            type: REQUEST_ROBOTS_SUCCESS,\r\n            payload: data\r\n        }))\r\n        .catch(error => dispatch({\r\n            type: REQUEST_ROBOTS_FAILED,\r\n            payload: error\r\n        }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEACRCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobotsReducer = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots ={\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobotsReducer = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false});\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport ThunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App'\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobotsReducer, requestRobotsReducer } from './reducers';\n\nconst rootReducer = combineReducers({\n  search: searchRobotsReducer,\n  request: requestRobotsReducer\n});\n\nconst store = createStore(rootReducer, applyMiddleware(ThunkMiddleware));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}